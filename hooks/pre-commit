#!/bin/sh
red="\033[1;31m"
blue="\033[1;34m"
reset="\033[0m"

printf "${blue}Running pre-commit hook${reset}\n"

FILES=$(git diff --cached --name-only --diff-filter=ACM | \
	grep -E "\.rs$|\.[tj]s$")

# If there is nothing to check, no need to format
if [ -z "$FILES" ]; then exit 0; fi

# Check that rustup is installed
if ! rustup --version > /dev/null 2>&1; then
	printf "${red}Can't find rustup, please install it/add it to path${reset}\n"
	exit 1
fi

# Check that nightly is installed (for rustfmt)
if ! rustup toolchain list | grep -q nightly; then
	printf "rustup nightly not found, attempting to install\n"
	printf "Running \"${blue}rustup toolchain install nightly${reset}\"\n"
	rustup toolchain install nightly
	
	# If it couldn't install, fail
	if [ "$?" -ne 0 ]; then exit 1; fi
fi

# Check that rustfmt is installed. If not, try to install
if ! rustfmt --version > /dev/null 2>&1; then
	printf "rustfmt not found, attempting to install\n"
	printf "Running \"${blue}rustup component add rustfmt${reset}\"\n"
	rustup component add rustfmt --toolchain nightly

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

# Check that clippy is installed. If not, try to install
if ! clippy-driver --version > /dev/null 2>&1; then
	printf "clippy not found, attempting to install\n"
	printf "Running \"\033[0;34mrustup component add clippy${reset}\"\n"
	rustup component add clippy 

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

# Check that npm is installed
if ! npm --version > /dev/null 2>&1; then
	printf "${red}Can't find nodejs, please install it/add it to path${reset}\n"
	exit 1
fi

# Check that eslint is installed. If not, try to install
if [ ! -f ./node_modules/.bin/eslint ]; then 
	printf "eslint not found, attempting to install\n"
	printf "Running \"\033[0;34mrnpm install${reset}\"\n"
	npm install

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

ESLINT="./node_modules/.bin/eslint"
	

# Now it starts running linters/formatters
# In all cases, for false postiives, rather than updating the linter,
# just disallow it for the specific line and write a comment saying that
# it triggers a false postiive

printf "${blue}Running clippy${reset}\n"
cargo clippy -- -A \
	clippy::blocks-in-if-conditions \
	-D warnings

if [ "$?" -ne 0 ]; then exit 1; fi

printf "${blue}Running rustfmt${reset}\n"
FILES_FORMATTED=""
RUSTFMT_OPTIONS="--unstable-features --config \
array_width=100,\
blank_lines_upper_bound=2,\
control_brace_style=ClosingNextLine,\
fn_single_line=true,\
hard_tabs=true,\
hex_literal_case=Upper,\
inline_attribute_width=50,\
match_arm_blocks=false,\
max_width=120,\
newline_style=Unix,\
normalize_comments=true,\
overflow_delimited_expr=true,\
group_imports=StdExternalCrate,\
single_line_if_else_max_width=100,\
struct_field_align_threshold=20,\
trailing_comma=Vertical,\
wrap_comments=true"

for FILE in $FILES; do
	if [ "${FILE##*.}" != "rs" ]; then break; fi

	rustfmt +nightly "$FILE" --check "$RUSTFMT_OPTIONS"

	if [ "$?" -ne 0 ]; then 
		rustfmt +nightly "$FILE" "$RUSTFMT_OPTIONS" > /dev/null 2>&1
		FILES_FORMATTED="${FILES_FORMATTED}${FILE}\n"
	fi

done

if [ -n "$FILES_FORMATTED" ]; then
	printf "${blue}These files were formatted, please commit again${reset}\n"
	for FILE in $FILES_FORMATTED; do echo "$FILE"; done
	exit 1
fi

# We can update our eslint config by running `eslint init` again
printf "${blue}Running eslint${reset}\n"
FILES_FORMATTED=""
for FILE in $FILES; do
	if [ "${FILE##*.}" != "ts" ] && [ "${FILE##*.}" != "js" ]; then break; fi
	$ESLINT "$FILE"

	if [ "$?" -ne 0 ]; then
		$ESLINT --fix "$FILE" > /dev/null 2>&1
		FILES_FORMATTED="${FILES_FORMATTED}${FILE}\n"
	fi
done

if [ -n "$FILES_FORMATTED" ]; then
	printf "${blue}These files were formatted, please commit again${reset}\n"
	for FILE in $FILES_FORMATTED; do echo "$FILE"; done
	exit 1
fi

# If it hasn't already failed, allow for commit
printf "${blue}Passed linters, proceeding to commit${reset}\n"
exit 0
