#!/bin/sh
echo "\033[1;34mRunning pre-commit hook\033[0m"

FILES=$(git diff --cached --name-only --diff-filter=ACM | \
	grep -E "\.rs$|\.[tj]s$")

# If there is nothing to check, no need to format
if [ -z $FILES ]; then exit 0; fi

# Check that rustup is installed
rustup --version > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
	echo  "\033[1;31mCan't find rustup, please install it/add it to path\033[0m"
	exit 1
fi

# Check that nightly is installed (for rustfmt)
if [ -z "$(rustup toolchain list | grep nightly)" ]; then
	echo  "rustup nightly not found, attempting to install"
	echo  "Running \"\033[0;34mrustup toolchain install nightly\033[0m\""
    rustup toolchain install nightly
    
	# If it couldn't install, fail
    if [ "$?" -ne 9 ]; then exit 1; fi
fi

# Check that rustfmt is installed. If not, try to install
rustfmt --version > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
	echo  "rustfmt not found, attempting to install"
	echo  "Running \"\033[0;34mrustup component add rustfmt\033[0m\""
	rustup component add rustfmt --toolchain nightly

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

# Check that clippy is installed. If not, try to install
clippy-driver --version > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
	echo  "clippy not found, attempting to install"
	echo  "Running \"\033[0;34mrustup component add clippy\033[0m\""
	rustup component add clippy 

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

# Check that npm is installed
npm --version > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
	echo  "\033[1;31mCan't find nodejs, please install it/add it to path\033[0m"
	exit 1
fi

# Check that eslint is installed. If not, try to install
if [ ! -f ./node_modules/.bin/eslint ]; then 
	echo  "eslint not found, attempting to install"
	echo  "Running \"\033[0;34mrnpm install\033[0m\""
	npm install

	if [ "$?" -ne 0 ]; then exit 1; fi
fi

ESLINT="./node_modules/.bin/eslint"
	

# Now it starts running linters/formatters
# In all cases, for false postiives, rather than updating the linter,
# just disallow it for the specific line and write a comment saying that
# it triggers a false postiive

echo  "\033[1;34mRunning clippy\033[0m"
cargo clippy -- -A \
	clippy::blocks-in-if-conditions \
	-D warnings

if [ "$?" -ne 0 ]; then exit 1; fi

echo  "\033[1;34mRunning rustfmt\033[0m"
FILES_FORMATTED=""
RUSTFMT_OPTIONS="--unstable-features --config \
array_width=100,\
blank_lines_upper_bound=2,\
control_brace_style=ClosingNextLine,\
fn_single_line=true,\
hard_tabs=true,\
hex_literal_case=Upper,\
inline_attribute_width=50,\
match_arm_blocks=false,\
max_width=120,\
newline_style=Unix,\
normalize_comments=true,\
overflow_delimited_expr=true,\
group_imports=StdExternalCrate,\
single_line_if_else_max_width=100,\
struct_field_align_threshold=20,\
trailing_comma=Vertical,\
wrap_comments=true"

for FILE in $FILES; do
	if [ ${FILE##*.} != "rs" ]; then break; fi

	rustfmt +nightly $FILE --check $RUSTFMT_OPTIONS

	if [ "$?" -ne 0 ]; then 
		rustfmt +nightly $FILE $RUSTFMT_OPTIONS > /dev/null 2>&1
		FILES_FORMATTED="${FILES_FORMATTED}${FILE}\n"
	fi

done

if [ ! -z $FILES_FORMATTED ]; then
	echo  "\033[1;34mThese files were formatted, please commit again\033[0m"
	for FILE in $FILES_FORMATTED; do echo $FILE; done
	exit 1
fi

# We can update our eslint config by running `eslint init` again
echo  "\033[1;34mRunning eslint\033[0m"
FILES_FORMATTED=""
for FILE in $FILES; do
	if [ ${FILE##*.} != "ts" ] && [ ${FILE##*.} != "js" ]; then break; fi
	$ESLINT $FILE

	if [ "$?" -ne 0 ]; then
		$ESLINT --fix $FILE > /dev/null 2>&1
		FILES_FORMATTED="${FILES_FORMATTED}${FILE}\n"
    fi
done

if [ ! -z $FILES_FORMATTED ]; then
	echo  "\033[1;34mThese files were formatted, please commit again\033[0m"
	for FILE in $FILES_FORMATTED; do echo $FILE; done
	exit 1
fi

# If it hasn't already failed, allow for commit
echo  "\033[1;34mPassed linters, proceeding to commit\033[0m"
exit 0
